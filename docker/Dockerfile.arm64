FROM debian:12.2

# set environment variables for tzdata
ARG TZ=America/New_York
ENV TZ=${TZ}

# include manual pages and documentation
ARG DEBIAN_FRONTEND=noninteractive

# Update sources for packages to be installed, and upgrade existing packages
# RUN apt-get update -y
# RUN apt-get upgrade -y

# include multiarch support
RUN apt-get update && apt-get -y install binfmt-support &&\
  dpkg --add-architecture amd64

# install all remaining packages for Weenix
RUN apt-get update && apt-get -y install\
    gcc-12-x86-64-linux-gnu\
    cscope\
    nasm\
    make\
    build-essential\
    grub2-common\
    xorriso\
    genisoimage\
    xterm\
    gdb-multiarch\
    mesa-utils\
    libgl1-mesa-glx\
    grub-pc-bin\
    python3-pip\
    python3-pyelftools\
    qemu-system-x86\
    locales
  
RUN apt-get update && apt-get -y install\
  sudo\
  vim\
  git\
  wget

# RUN apt-get install python3-pyelftools

# install GCC-related packages
# RUN apt-get -y install\
#  binutils-doc\
#  #cpp-doc\
#  #gcc-doc\
#  #g++\
#  gdb\
#  #gdb-doc\
#  #glibc-doc\
# #  libblas-dev\
# #  liblapack-dev\
#  #liblapack-doc\
#  #libstdc++-10-doc\
#  make
#  #make-doc

# install clang-related packages
# RUN apt-get -y install\
#  clang\
#  #clang-10-doc\
#  lldb

# install qemu for WeensyOS (sadly, this pulls in a lot of crap)
# RUN apt-get -y install\
#  qemu-system-x86

# install programs used for system exploration
# RUN apt-get -y install\
#  blktrace\
#  #linux-tools-generic\
#  strace\
#  tcpdump

# install interactive programs (emacs, vim, nano, man, sudo, etc.)
# RUN apt-get -y install\
#  bc\
#  curl\
#  dc\
#  emacs-nox\
#  git\
#  git-doc\
#  man\
#  micro\
#  nano\
#  psmisc\
#  sudo\
#  vim\
#  wget

# set up libraries
# RUN apt-get -y install\
#  libreadline-dev\
#  locales\
#  wamerican

# install programs used for networking
# RUN apt-get -y install\
#  dnsutils\
#  inetutils-ping\
#  iproute2\
#  net-tools\
#  #netcat\
#  telnet\
#  time\
#  traceroute

# Install cs1670-specific stuff
# (some of which may have already been installed)
# Changes from the course-official installation
# - python-minimal -> python2-minimal; error: no installation candidate
# - added: - mesa-utils libgl1-mesa-glx grub-pc-bin; address weenix boot error

# Python 2 Stuff
#WORKDIR /tmp
#RUN wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz \
#    && tar -xvf Python-2.7.18.tgz \
#    && cd Python-2.7.18 \
#    && ./configure --enable-optimizations \
#    && make \
#    && make install \
#    && cd .. \
#    && rm -rf Python-2.7.18 Python-2.7.18.tgz
#
# RUN sudo apt-get update
# RUN sudo apt-get -y install\
#     #python2\
#     #python2-minimal\
#     cscope\
#     nasm\
#     make\
#     build-essential\
#     grub2-common\
#     #qemu\
#     xorriso\
#     genisoimage\
#     xterm\
#     gdb\
#     mesa-utils\
#     libgl1-mesa-glx\
#     grub-pc-bin\
#     python3-pip
# RUN apt-get install python3-pyelftools
#RUN pip3 install pyelftools

# install GCC-related packages for amd64
# RUN apt-get -y install\
#  g++-12-x86-64-linux-gnu\
#  gdb-multiarch\
#  libc6:amd64\
#  libstdc++6:amd64\
#  #libasan5:amd64\
#  libtsan0:amd64\
#  libubsan1:amd64\
#  libreadline-dev:amd64\
#  libblas-dev:amd64\
#  liblapack-dev:amd64\
#  qemu-user

# link x86-64 versions of common tools into /usr/x86_64-linux-gnu/bin
# RUN for i in addr2line c++filt cpp-12 g++-12 gcc-12 gcov-12 gcov-dump-12 gcov-tool-12 size strings; do \
#         ln -s /usr/bin/x86_64-linux-gnu-$i /usr/x86_64-linux-gnu/bin/$i; done && \
  # ln -s /usr/bin/x86_64-linux-gnu-cpp-12 /usr/x86_64-linux-gnu/bin/cpp && \
  # ln -s /usr/bin/x86_64-linux-gnu-g++-12 /usr/x86_64-linux-gnu/bin/c++ && \
  # ln -s /usr/bin/x86_64-linux-gnu-g++-12 /usr/x86_64-linux-gnu/bin/g++ && \
RUN ln -s /usr/bin/x86_64-linux-gnu-gcc-12 /usr/x86_64-linux-gnu/bin/gcc && \
  ln -s /usr/bin/x86_64-linux-gnu-gcc-12 /usr/x86_64-linux-gnu/bin/cc && \
  ln -s /usr/bin/gdb-multiarch /usr/x86_64-linux-gnu/bin/gdb

# install dependencies I personally like and use
# RUN sudo apt-get -y install\
#     htop\
#     vim\
#     tmux

# Download and extract Python 2 source
RUN apt-get update && apt-get install -y \
    libncurses5-dev \
    libncursesw5-dev

WORKDIR /tmp
RUN wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz \
    && tar -xvf Python-2.7.18.tgz \
    && cd Python-2.7.18 \
    && ./configure \
    && make \
    && make install \
    && cd .. \
    && rm -rf Python-2.7.18 Python-2.7.18.tgz
  
# Clean up temporary files
WORKDIR /
RUN rm -rf /tmp/*

# set up default locale
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8

# remove unneeded .deb files
RUN rm -r /var/lib/apt/lists/*

# set up passwordless sudo for user cs1670-user
RUN useradd -m -s /bin/bash cs1670-user && \
  echo "cs1670-user ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/cs1670-init

# create binary reporting version of dockerfile
RUN (echo '#\!/bin/sh'; echo 'if test "x$1" = x-n; then echo 12; else echo 12.arm64; fi') > /usr/bin/cs1670-docker-version; chmod ugo+rx,u+w,go-w /usr/bin/cs1670-docker-version

# git build arguments
ARG USER=CS1670 User
ARG EMAIL=nobody@example.com

# configure your environment
USER cs1670-user
RUN git config --global user.name "${USER}" && \
  git config --global user.email "${EMAIL}" && \
  (echo "(custom-set-variables"; echo " '(c-basic-offset 4)"; echo " '(indent-tabs-mode nil))") > ~/.emacs && \
  (echo "set expandtab"; echo "set shiftwidth=4"; echo "set softtabstop=4") > ~/.vimrc && \
  (echo "if test -f /run/host-services/ssh-auth.sock; then"; echo "  sudo chown cs1670-user:cs1670-user /run/host-services/ssh-auth.sock"; echo "fi") > ~/.bash_profile && \
  echo ". ~/.bashrc" >> ~/.bash_profile && \
  echo "export PATH=/usr/x86_64-linux-gnu/bin:\$PATH" >> ~/.bashrc && \
  rm -f ~/.bash_logout && \
  echo "add-auto-load-safe-path ~" > ~/.gdbinit

WORKDIR /home/cs1670-user
CMD ["/bin/bash", "-l"]

# Initial version of this Dockerfile by Todd Morrill, CS 61 DCE student

